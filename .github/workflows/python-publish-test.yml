name: Publish to PyPI Test

env:
  REPO_OWNER_USERNAME: ${{ secrets.REPO_OWNER_USERNAME }}

on:
  workflow_dispatch:
    permissions:
      users:
        - $REPO_OWNER_USERNAME

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Run Unittest Tests
        run: |
          python -m unittest discover tests -p '*_test.py'

  publish:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Check Version
        id: check_version
        run: |
          LAST_VERSION=$(grep "__version__ = .*" nsdpy.py | sed " s/__version__ = //")
          echo "version is $LAST_VERSION"
          if grep -q ".*-beta$" <<< "$LAST_VERSION"; then
          echo "Version is not a test version: should end with -beta"
          exit 1
          fi
          echo "$LAST_VERSION"
          echo "Last version: $LAST_VERSION"
          echo "last_version=$LAST_VERSION" >> $GITHUB_OUTPUT

      - name: Check for Existing Tag
        id: increment_version_and_check_tag
        run: |
          LAST_VERSION=${{ steps.check_version.outputs.last_version }}
          echo "result of last version: $LAST_VERSION"
          git fetch --tags --quiet
          TAG_EXISTS=$(git tag -l "$LAST_VERSION")
          echo "$TAG_EXISTS"
          if [ -z "$TAG_EXISTS" ]; then
          echo "No matching tags found for version $LAST_VERSION"
          exit 1
          fi
          echo "checking tag isSemVer..."
          SEMVER="^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$"
          echo "$SEMVER"
          echo "$TAG_EXISTS"
          echo ${TAG_EXISTS/^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/x}
          if [ (grep -oE "$SEMVER" <<< "$TAG_EXISTS") -eq "$TAG_EXISTS" ]; then
          echo "Tag $TAG_EXISTS is a valid SemVer"
          else
          echo "Tag $TAG_EXISTS is not SemVer, check https://semver.org/ for more info"
          exit 1
          fi
          echo "Matching tags: $TAG_EXISTS"
          echo "tags=$TAG_EXISTS" >> $GITHUB_OUTPUT

      #     echo "::set-output name=new_version::$NEW_VERSION"
      #     echo "::set-output name=tag_exists::$TAG_EXISTS"

      # - name: Update Version and Files
      #   if: steps.increment_version_and_check_tag.outputs.tag_exists != '1'
      #   run: |
      #     NEW_VERSION=${{ steps.increment_version_and_check_tag.outputs.new_version }}
      #     sed -i "s/__version__ = .*/__version__ = \"$NEW_VERSION\"/" nsdpy.py
      #     poetry version $NEW_VERSION
      #     git config --global user.email "github-actions@gg.com"
      #     git config --global user.name "GitHub Actions"
      #     git commit -am "Bump version to $NEW_VERSION [skip ci]"
      #     git push origin $BRANCH_NAME

      # - name: Create Tag and Push
      #   if: steps.increment_version_and_check_tag.outputs.tag_exists != '1'
      #   run: |
      #     NEW_VERSION=${{ steps.increment_version_and_check_tag.outputs.new_version }}
      #     BRANCH_NAME=${GITHUB_REF##*/}
      #     COMMIT_SHA=$(git rev-parse HEAD)
      #     git tag -a $NEW_VERSION -m "Version $NEW_VERSION, Branch: $BRANCH_NAME, Commit: $COMMIT_SHA"
      #     git push origin $NEW_VERSION

      - name: Build and Publish to PyPI Test
        env:
          BOT_ACCESS_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}
        if: steps.increment_version_and_check_tag.outputs.tag_exists != '1'
        run: |
          echo $BOT_ACCESS_TOKEN
          poetry build
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi $BOT_ACCESS_TOKEN
          poetry publish -r test-pypi
